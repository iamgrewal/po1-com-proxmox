#!/bin/bash
# Non-interactive version of install_in_place_bookworm.sh
# Accepts parameters for automated installation

# Usage: ./install_in_place_bookworm_auto.sh <node_name> <node_ip> <subnet_mask> <interface_name>

# Check if all required parameters are provided
if [ $# -lt 4 ]; then
    echo "Usage: $0 <node_name> <node_ip> <subnet_mask> <interface_name>"
    echo "Example: $0 pve1 192.168.1.100 255.255.255.0 eth0"
    exit 1
fi

# Set parameters from command line arguments
NODENAME="$1"
NODEIP="$2"
SUBNETMASK="$3"
INTERFACE_NAME="$4"

# Phase file to track installation progress
PHASE_FILE="/root/.proxmox_install_phase"

# Check if we're continuing from a reboot
if [ -f "$PHASE_FILE" ]; then
    CURRENT_PHASE=$(cat "$PHASE_FILE")
else
    CURRENT_PHASE="1"
fi

# Variables
NODE_NAME=$NODENAME
NODE_IP=$NODEIP
NETMASK=$SUBNETMASK
GATEWAY=${NODEIP%.*}.1  # Calculate gateway from IP (assumes standard gateway at .1)
INTERFACE=$INTERFACE_NAME
BRIDGE="vmbr0"
LOG_FILE="/var/log/proxmox_install.log"
NETWORK_BACKUP="/etc/network/interfaces.backup"
TEMP_NETWORK_CONFIG="/tmp/interfaces.temp"

# Function to log messages
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Function to handle errors
error_exit() {
    log "ERROR: $1"
    echo "ERROR: $1" >&2
    exit 1
}

# Create log file if it doesn't exist
touch "$LOG_FILE" || error_exit "Cannot create log file"

log "Starting Proxmox VE installation in non-interactive mode"
log "Node Name: $NODE_NAME"
log "Node IP: $NODE_IP"
log "Netmask: $NETMASK"
log "Gateway: $GATEWAY"
log "Interface: $INTERFACE"

# Main installation logic based on current phase
case "$CURRENT_PHASE" in
    "1")
        log "Starting Phase 1: Initial setup"
        
        # Step 1: Update package lists
        log "Updating package lists..."
        apt-get update || error_exit "Failed to update package lists"
        
        # Step 2: Configure network
        log "Configuring network..."
        
        # Backup existing network configuration
        if [ -f "/etc/network/interfaces" ]; then
            cp "/etc/network/interfaces" "$NETWORK_BACKUP" || error_exit "Failed to backup network configuration"
        fi
        
        # Create new network configuration
        cat > "$TEMP_NETWORK_CONFIG" <<EOF
# Network configuration for Proxmox VE
# Generated by automated installation script

auto lo
iface lo inet loopback

auto $INTERFACE
iface $INTERFACE inet manual

auto $BRIDGE
iface $BRIDGE inet static
    address $NODE_IP
    netmask $NETMASK
    gateway $GATEWAY
    bridge_ports $INTERFACE
    bridge_stp off
    bridge_fd 0
EOF
        
        # Apply new network configuration
        cp "$TEMP_NETWORK_CONFIG" "/etc/network/interfaces" || error_exit "Failed to apply network configuration"
        
        # Step 3: Configure hostname and hosts file
        log "Configuring hostname and hosts file..."
        echo "$NODE_NAME" > /etc/hostname || error_exit "Failed to set hostname"
        
        # Update hosts file
        cat > /etc/hosts <<EOF
127.0.0.1 localhost
$NODE_IP $NODE_NAME

# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOF
        
        # Step 4: Configure repositories
        log "Configuring repositories..."
        
        # Disable enterprise repository
        sed -i 's/^deb/#deb/' /etc/apt/sources.list.d/pve-enterprise.list || error_exit "Failed to disable enterprise repo"
        
        # Add community repository
        echo "deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription" > /etc/apt/sources.list.d/pve-community.list || error_exit "Failed to add PVE community repo"
        
        # Configure Debian repositories
        cat > /etc/apt/sources.list <<EOF
deb https://ftp.debian.org/debian/ bookworm main contrib non-free non-free-firmware
deb https://ftp.debian.org/debian/ bookworm-updates main contrib non-free non-free-firmware
deb https://ftp.debian.org/debian/ bookworm-backports main contrib non-free non-free-firmware
deb https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware
EOF
        
        # Add Ceph repository
        echo "deb http://download.proxmox.com/debian/ceph-squid bookworm no-subscription" > /etc/apt/sources.list.d/ceph-squid-community.list || error_exit "Failed to add Ceph community repo"
        
        # Update package lists after repository changes
        apt-get update || error_exit "Failed to update package lists after repository changes"
        
        # Step 5: Remove subscription nag
        log "Removing subscription nag..."
        cat > /etc/apt/apt.conf.d/no-nag-script <<'EOF'
DPkg::Post-Invoke {
  "dpkg -V proxmox-widget-toolkit | grep -q '/proxmoxlib\.js$'; \
   if [ $? -eq 1 ]; then { \
     echo 'Removing subscription nag from UI...'; \
     sed -i '/data.status/{s/\\!//;s/Active/NoMoreNagging/}' /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js; \
   }; fi";
};
EOF
        
        # Step 6: Prepare for reboot
        log "Preparing for reboot..."
        echo "2" > "$PHASE_FILE"
        log "Phase 1 complete. System will reboot now."
        
        # Schedule reboot after 10 seconds to allow logs to be written
        (sleep 10 && reboot) &
        ;;
        
    "2")
        log "Starting Phase 2: Post-reboot installation"
        
        # Step 7: Package Installation
        log "Installing Proxmox VE packages..."
        apt-get install -y proxmox-ve postfix open-iscsi chrony || error_exit "Failed to install Proxmox VE packages."
        
        # Configure postfix for local only
        debconf-set-selections <<< "postfix postfix/mailname string $NODE_NAME"
        debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Local only'"
        dpkg-reconfigure -f noninteractive postfix
        
        # Step 8: Final configuration
        log "Performing final configuration..."
        
        # Enable and start services
        systemctl enable --now chrony || log "Warning: Failed to enable chrony"
        systemctl enable --now open-iscsi || log "Warning: Failed to enable open-iscsi"
        
        # Mark installation as complete
        echo "3" > "$PHASE_FILE"
        log "Installation completed successfully!"
        ;;
        
    "3")
        log "Installation already completed. No action needed."
        ;;
        
    *)
        error_exit "Unknown installation phase: $CURRENT_PHASE"
        ;;
esac

exit 0
